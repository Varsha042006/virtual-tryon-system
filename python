import cv2
import mediapipe as mp
import numpy as np
import os

# List of T-shirt/dress image paths
tshirt_paths = [
    'C:\\Users\\vinut\\OneDrive\\virtual_tryon\\pink1.png',
    'C:\\Users\\vinut\\OneDrive\\virtual_tryon\\redtop.jpg',
    'C:\\Users\\vinut\\OneDrive\\virtual_tryon\\blackbg.png',
]

# Function to remove both white and black backgrounds
def remove_background(img, threshold=30):
    if img is None:
        return None
    img_bgra = cv2.cvtColor(img, cv2.COLOR_BGR2BGRA)
    white_mask = np.all(img[:, :, :3] >= (255 - threshold), axis=2)
    black_mask = np.all(img[:, :, :3] <= threshold, axis=2)
    alpha_mask = ~(white_mask | black_mask)
    img_bgra[:, :, 3] = (alpha_mask * 255).astype(np.uint8)
    return img_bgra

# Function to rotate image
def rotate_image(img, angle):
    h, w = img.shape[:2]
    center = (w // 2, h // 2)
    rot_mat = cv2.getRotationMatrix2D(center, angle, 1.0)
    rotated = cv2.warpAffine(img, rot_mat, (w, h), flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_CONSTANT, borderValue=(0, 0, 0, 0))
    return rotated

# Load initial T-shirt image
current_index = 0
tshirt_img = cv2.imread(tshirt_paths[current_index])
if tshirt_img is not None:
    tshirt_img = remove_background(tshirt_img)
else:
    print(f"[Error] Failed to load initial image: {tshirt_paths[current_index]}")
    exit()

# Initialize Mediapipe Pose
mp_pose = mp.solutions.pose
pose = mp_pose.Pose()

# Access Webcam
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("[Error] Could not access webcam. Please check permissions or device.")
    exit()

prev_x, prev_y = 0, 0  # For smoothing

while True:
    ret, frame = cap.read()
    if not ret:
        print("[Error] Failed to read from webcam.")
        break

    frame = cv2.flip(frame, 1)
    h, w, _ = frame.shape
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = pose.process(rgb)

    if results.pose_landmarks:
        lm = results.pose_landmarks.landmark
        ls, rs = lm[mp_pose.PoseLandmark.LEFT_SHOULDER], lm[mp_pose.PoseLandmark.RIGHT_SHOULDER]
        lh, rh = lm[mp_pose.PoseLandmark.LEFT_HIP], lm[mp_pose.PoseLandmark.RIGHT_HIP]

        x1, y1 = int(ls.x * w), int(ls.y * h)
        x2, y2 = int(rs.x * w), int(rs.y * h)
        x3, y3 = int(lh.x * w), int(lh.y * h)
        x4, y4 = int(rh.x * w), int(rh.y * h)

        tshirt_width = int(1.4 * abs(x2 - x1))
        torso_height = max(abs(y3 - y1), abs(y4 - y2))
        tshirt_height = int(1.6 * torso_height)
        shoulder_angle = np.arctan2(y1 - y2, x1 - x2) * 180 / np.pi

        x_center = int((x1 + x2) / 2)
        y_center = int((y1 + y3) / 2)
        x_center = int(0.7 * prev_x + 0.3 * x_center)
        y_center = int(0.7 * prev_y + 0.3 * y_center)
        prev_x, prev_y = x_center, y_center

        x_start = int(x_center - tshirt_width / 2)
        y_start = int(y_center - tshirt_height / 2)

        # Resize and rotate
        if tshirt_img is not None:
            resized = cv2.resize(tshirt_img, (tshirt_width, tshirt_height))
            rotated = rotate_image(resized, shoulder_angle)

            rh, rw = rotated.shape[:2]
            for i in range(rh):
                for j in range(rw):
                    y_pos = y_start + i
                    x_pos = x_start + j
                    if 0 <= x_pos < w and 0 <= y_pos < h:
                        alpha = rotated[i, j, 3] / 255.0
                        if alpha > 0:
                            for c in range(3):
                                frame[y_pos, x_pos, c] = int(
                                    alpha * rotated[i, j, c] + (1 - alpha) * frame[y_pos, x_pos, c]
                                )

    cv2.imshow('Virtual Clothes Try-On', frame)

    key = cv2.waitKey(1) & 0xFF
    if key in [ord('1'), ord('2'), ord('3')]:
        idx = int(chr(key)) - 1
        if 0 <= idx < len(tshirt_paths):
            temp_img = cv2.imread(tshirt_paths[idx])
            if temp_img is not None:
                tshirt_img = remove_background(temp_img)
                current_index = idx
                print(f"[Info] Switched to: {tshirt_paths[idx]}")
            else:
                print(f"[Error] Could not load: {tshirt_paths[idx]}")
    elif key == ord('q'):
        print("[Exit] Exiting program.")
        break

cap.release()
cv2.destroyAllWindows()
